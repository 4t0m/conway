{"version":3,"sources":["webpack:///webpack/bootstrap 51ac8a8f5e53fb773afc","webpack:///./lib/util.js","webpack:///./lib/command.js","webpack:///./lib/cell.js","webpack:///./lib/board.js","webpack:///./lib/game.js","webpack:///./lib/adversary.js","webpack:///./lib/cursor.js","webpack:///./lib/generals.js","webpack:///./lib/move_tree.js","webpack:///./lib/special_cells.js","webpack:///./lib/tree_node.js"],"names":["colors","eachHTMLCell","gameBoard","callback","grid","forEach","row","rowIdx","cell","colIdx","htmlCell","document","getElementById","populateHTML","htmlGrid","htmlRow","insertRow","id","insertCell","classList","add","color","mountain","king","innerHTML","count","contains","city","updateHTML","remove","isHidden","unselectOtherCells","board","shuffle","array","counter","length","index","Math","floor","random","temp","getNextCoordinates","direction","nextId","coordinates","split","map","parseInt","char","console","log","Command","nextCoordinates","nextCell","capture","removeFog","Cell","otherCell","Board","populateBoard","kings","allCells","filter","i","push","j","k","pop","reduce","row1","row2","concat","find","getElementsByClassName","coordinatePairs","pair","every","num","adjacentCell","Game","cursor","adversary","startIntervals","userCommand","nextMove","execute","adversaryCommand","winner","endGame","cities","generateTroops","capturedTerritory","movementInterval","setInterval","iterateMovement","bind","cityInterval","iterateCityGeneration","territoryInterval","iterateTerritoryGeneration","clearInterval","removeIntervals","setTimeout","winModal","winMessage","playButton","quitButton","content","Adversary","moves","seen","playerKing","strategy","contactCell","addMoves","shift","updateStrategy","explore","attack","defend","kill","seenByPlayer","canSeePlayer","startingCell","largestArmy","search","continueCount","newMoves","findCell","join","shouldCapture","otherDirections","otherDirection","moveTree","attackVector","findPath","blueTerritory","redCell","visibleCells","includeKing","currentLargest","Cursor","currentHTMLCell","coord","currentCell","nextHTMLCell","game","selectCell","e","target","currentTarget","stopPropagation","addEventListener","key","clearMoves","move","infoBox","winBox","openInfo","closeInfo","closeWin","playAgain","reset","firstChild","removeChild","aboutButton","closeAboutButton","closeWinButton","newGameButton","playAgainButton","MoveTree","visitedCells","rootNode","buildMoveTree","targetCell","endNode","bfSearch","path","pathFromEnd","commands","directionToChild","node","directionFromParent","reverse","nodes","currentNode","newCells","nextNode","addChild","moveableCells","includes","candidateCell","parent","City","King","Mountain","Object","freeze","TreeNode","children","removeFromChildren","addToChildren","orientFromParent","child","setParent","newChild","childToRemove","childNode","ownCoords","parentCoords"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 7);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 51ac8a8f5e53fb773afc","const colors = [\"red\", \"blue\", \"unoccupied\"];\n\nconst eachHTMLCell = function (gameBoard, callback) {\n  gameBoard.grid.forEach( (row, rowIdx) => {\n    row.forEach((cell, colIdx) => {\n      let htmlCell = document.getElementById(`${rowIdx}-${colIdx}`);\n      callback(htmlCell);\n    });\n  });\n};\n\nexport const populateHTML = function (gameBoard, htmlGrid) {\n  gameBoard.grid.forEach( (row, rowIdx) => {\n    let htmlRow = htmlGrid.insertRow();\n    htmlRow.id = rowIdx;\n    row.forEach( (cell, colIdx) => {\n      let htmlCell = htmlRow.insertCell();\n      htmlCell.id = `${rowIdx}-${colIdx}`;\n      htmlCell.classList.add(cell.color);\n\n      if (cell.mountain) {\n        htmlCell.classList.add('mountain');\n      } else {\n        cell.id = htmlCell.id;\n        if (cell.king) {\n          htmlCell.innerHTML = cell.count;\n          htmlCell.classList.add('king');\n          if (htmlCell.classList.contains('red')) {\n            htmlCell.classList.add('selected');\n          }\n        } else if (cell.city) {\n          htmlCell.innerHTML = cell.count;\n          htmlCell.classList.add('city');\n        }\n      }\n    });\n  });\n};\n\n// refactor this to use eachHTMLCell\nexport const updateHTML = function (gameBoard) {\n  gameBoard.grid.forEach( (row, rowIdx) => {\n    row.forEach((cell, colIdx) => {\n      let htmlCell = document.getElementById(`${rowIdx}-${colIdx}`);\n      if (!cell.mountain) {\n        if (cell.color !== 'unoccupied' || cell.city) {\n          htmlCell.innerHTML = cell.count;\n        }\n        colors.forEach((color) => htmlCell.classList.remove(color));\n        htmlCell.classList.add(cell.color);\n      }\n\n      htmlCell.isHidden ? htmlCell.classList.add('hidden') : htmlCell.classList.remove('hidden');\n    });\n  });\n};\n\nexport const unselectOtherCells = function (board) {\n  eachHTMLCell(board, (htmlCell) => (htmlCell.classList.remove('selected')));\n};\n\nexport const shuffle = function (array) {\n    let counter = array.length;\n\n    while (counter > 0) {\n        let index = Math.floor(Math.random() * counter);\n\n        counter--;\n\n        let temp = array[counter];\n        array[counter] = array[index];\n        array[index] = temp;\n    }\n\n    return array;\n};\n\nexport const getNextCoordinates = function (id, direction) {\n    let nextId;\n    let coordinates = id.split('-').map(char => parseInt(char));\n\n    switch (direction) {\n      case 'up':\n        return [coordinates[0]-1, coordinates[1]];\n      case 'down':\n        return [coordinates[0]+1, coordinates[1]];\n      case 'left':\n        return [coordinates[0], coordinates[1]-1];\n      case 'right':\n        return [coordinates[0], coordinates[1]+1];\n      default:\n        console.log('Invalid Move');\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/util.js","import { getNextCoordinates } from './util';\n\nclass Command {\n  constructor(cell, direction){\n    this.cell = cell;\n    this.nextCoordinates = getNextCoordinates(cell.id, direction);\n    this.direction = direction;\n  }\n\n  execute(board) {\n    let nextCell = board.grid[this.nextCoordinates[0]][this.nextCoordinates[1]];\n    if (this.cell && this.cell.color !== 'unoccupied' && !nextCell.mountain) {\n      // TODO remove direction class from currentHTMLCell\n      this.cell.capture(nextCell);\n\n      // TODO remove fog from adjacent pieces\n      if (this.cell.color === 'red') {\n        this.removeFog(board);\n      }\n    }\n  }\n\n  removeFog(board) {\n    // get all htmlCells adjacent to the nextHTMLCell, and remove fog class\n    // actually, just get normal cells, call reveal on them, and let update do\n    // the work of removing/applying the fog\n\n    // use board.visibleCells\n  }\n}\n\nexport default Command;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/command.js","class Cell {\n  constructor() {\n    this.color = \"unoccupied\";\n    this.count = 0;\n    this.isHidden = false;\n    this.id = null;\n  }\n\n  capture(otherCell) {\n    if (this.count > 1) {\n      if (this.color === otherCell.color) {\n        otherCell.count = otherCell.count + this.count - 1;\n      } else {\n        if (this.count - 1 > otherCell.count) {\n          otherCell.count = this.count - otherCell.count - 1;\n          otherCell.color = this.color;\n        } else {\n          otherCell.count = otherCell.count - (this.count - 1);\n        }\n      }\n      this.count = 1;\n    }\n  }\n\n  generateTroops() {\n    this.count++;\n  }\n\n  reveal() {\n    this.isHidden = false;\n  }\n}\n\nexport default Cell;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cell.js","import Cell from './cell';\nimport { City, Mountain, King } from './special_cells';\nimport { shuffle } from './util';\n\nclass Board {\n  constructor() {\n    this.grid = [];\n    this.populateBoard();\n    this.kings = this.allCells().filter(cell => cell.king);\n  }\n\n  populateBoard() {\n    // create an array with all cities, mountains, and cells\n    let allCells = [];\n\n    for (var i = 0; i < 80; i++) {\n      allCells.push(new Cell());\n    }\n\n    for (var j = 0; j < 10; j++) {\n      allCells.push(Mountain);\n    }\n\n    for (var k = 0; k < 8; k++) {\n      allCells.push(new City());\n    }\n\n    allCells.push(new King('red'));\n    allCells.push(new King('blue'));\n\n    // shuffle array\n    shuffle(allCells);\n\n    // iterate through shuffled array and push things into the grid\n    for (var rowIdx = 0; rowIdx < 10; rowIdx++) {\n      let row = [];\n      for (var colIdx = 0; colIdx < 10; colIdx++) {\n        row.push(allCells.pop());\n      }\n\n      this.grid.push(row);\n    }\n  }\n\n  allCells() {\n    return this.grid.reduce( (row1, row2) => row1.concat(row2));\n  }\n\n  cities() {\n    return this.allCells().filter(cell => cell.city);\n  }\n\n  capturedTerritory() {\n    return this.allCells().filter(cell => cell.color !== 'unoccupied');\n  }\n\n  findCell(id) {\n    return this.allCells().find(cell => cell.id === id);\n  }\n\n  winner() {\n    if (document.getElementsByClassName('king red').length === 2) {\n      return 'red';\n    } else if (document.getElementsByClassName('king blue').length === 2) {\n      return 'blue';\n    } else {\n      return false;\n    }\n  }\n\n  blueTerritory() {\n    return this.allCells().filter(cell => cell.color === 'blue');\n  }\n\n  moveableCells(cell) {\n    // TODO refactor this and visibleCells to remove duplication of code\n    let coordinates = cell.id.split('-').map(char => parseInt(char));\n    let coordinatePairs = [[coordinates[0]-1, coordinates[1]],\n                           [coordinates[0]+1, coordinates[1]],\n                           [coordinates[0], coordinates[1]-1],\n                           [coordinates[0], coordinates[1]+1]];\n     return coordinatePairs.filter(pair => pair.every(num => num >= 0 && num <= 9))\n                           .map(pair => this.grid[pair[0]][pair[1]])\n                           .filter(adjacentCell => !adjacentCell.mountain);\n  }\n\n  visibleCells(cell) {\n    let coordinates = cell.id.split('-').map(char => parseInt(char));\n    let coordinatePairs = [[coordinates[0]-1, coordinates[1]],\n                           [coordinates[0]-1, coordinates[1]-1],\n                           [coordinates[0]+1, coordinates[1]],\n                           [coordinates[0]+1, coordinates[1]+1],\n                           [coordinates[0], coordinates[1]-1],\n                           [coordinates[0]+1, coordinates[1]-1],\n                           [coordinates[0], coordinates[1]+1],\n                           [coordinates[0]-1, coordinates[1]+1]];\n     return coordinatePairs.filter(pair => pair.every(num => num >= 0 && num <= 9))\n                           .map(pair => this.grid[pair[0]][pair[1]]);\n  }\n\n  reset() {\n    this.grid = [];\n    this.populateBoard();\n    this.kings = this.allCells().filter(cell => cell.king);\n  }\n}\n\n\nexport default Board;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/board.js","import Cursor from './cursor';\nimport Adversary from './adversary';\n\nclass Game {\n  constructor(board) {\n    this.board = board;\n    this.cursor = new Cursor(board);\n    this.adversary = new Adversary(board);\n\n    this.startIntervals();\n  }\n\n\n  iterateMovement() {\n    let userCommand = this.cursor.nextMove();\n    if (userCommand) {\n      userCommand.execute(this.board);\n    }\n\n    let adversaryCommand = this.adversary.nextMove();\n    if (adversaryCommand) {\n      adversaryCommand.execute(this.board);\n    }\n\n    //TODO this is terrible!  it ends the game before you actually take the enemy piece\n    if (this.board.winner()) {\n      this.endGame(this.board.winner());\n    }\n  }\n\n  iterateCityGeneration() {\n    this.board.cities().forEach( (city) => {\n      if (city.color !== 'unoccupied' || city.count < 40) {\n        city.generateTroops();\n      }\n    });\n  }\n\n  iterateTerritoryGeneration() {\n    this.board.capturedTerritory().forEach((cell) => cell.generateTroops());\n  }\n\n  startIntervals() {\n    this.movementInterval = setInterval(this.iterateMovement.bind(this), 500);\n    this.cityInterval = setInterval(this.iterateCityGeneration.bind(this), 1000);\n    this.territoryInterval = setInterval(this.iterateTerritoryGeneration.bind(this), 25000);\n  }\n\n  removeIntervals() {\n    clearInterval(this.movementInterval);\n    clearInterval(this.cityInterval);\n    clearInterval(this.territoryInterval);\n  }\n\n  endGame(winner) {\n    this.removeIntervals();\n\n    setTimeout(() => {\n      let winModal = document.getElementById('win-modal');\n      let winMessage = document.getElementById('win-message');\n      let playButton = document.getElementById('play-button');\n      let quitButton = document.getElementById('play-button');\n      let content = winner === 'red' ? \"Congrats! You win!\" : \"Sorry, want to try again?\"\n\n\n      winModal.classList.remove('is-hidden');\n      winMessage.innerHTML = content;\n    }, 10)\n\n  }\n\n}\n\nexport default Game;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/game.js","import Command from './command';\nimport MoveTree from './move_tree';\nimport { shuffle, getNextCoordinates } from './util';\nimport TreeNode from './tree_node';\n\nclass Adversary {\n  constructor(board) {\n    this.board = board;\n    this.king = board.cities().find(cell => cell.king && cell.color === 'blue');\n    this.moves = [];\n    this.seen = false;\n    this.playerKing = null;\n    this.strategy = 'explore';\n    this.contactCell = null;\n  }\n\n  nextMove() {\n    this.addMoves();\n    if (this.moves.length === 0) {\n      return false;\n    }\n\n    while (this.moves[0].cell.color !== 'blue' || this.moves[0].cell.count < 2) {\n      this.moves.shift();\n      if (this.moves.length === 0) {\n        return false;\n      }\n    }\n\n    return this.moves.shift();\n  }\n\n  addMoves() {\n    this.updateStrategy();\n    switch (this.strategy) {\n      case 'explore':\n        this.explore();\n        break;\n      case 'attack':\n        this.attack();\n        break;\n      case 'defend':\n        this.defend();\n        break;\n      case 'kill':\n        this.kill();\n        break;\n      default:\n        console.log(\"Invalid movement strategy\");\n    }\n  }\n\n  updateStrategy() {\n    this.seenByPlayer();\n    this.canSeePlayer();\n\n    if (this.seen) {\n      if (this.strategy !== 'defend') {\n        this.moves = [];\n      }\n      this.strategy = 'defend';\n    } else if (this.playerKing) {\n      if (this.strategy !== 'kill') {\n        this.moves = [];\n      }\n      this.strategy = 'kill';\n    } else if (this.contactCell) {\n      if (this.strategy !== 'attack') {\n        this.moves = [];\n      }\n      this.strategy = 'attack';\n    } else {\n      if (this.strategy !== 'explore') {\n        this.moves = [];\n      }\n      this.strategy = 'explore';\n    }\n  }\n\n  explore() {\n    // TODO Have it actively try to take cities when it has a lot of troops\n    if (this.moves.length === 0) {\n      let startingCell = this.largestArmy(true);\n      this.moves = this.moves.concat(this.search(startingCell, 'up'));\n      this.moves = this.moves.concat(this.search(startingCell, 'down'));\n      this.moves = this.moves.concat(this.search(startingCell, 'left'));\n      this.moves = this.moves.concat(this.search(startingCell, 'right'));\n    }\n  }\n\n  search(startingCell, direction, continueCount = 4) {\n    let newMoves = [];\n    let cell = startingCell;\n\n    for (var i = 0; i < 10; i++) {\n      if (cell) {\n        let nextCoordinates = getNextCoordinates(cell.id, direction);\n        let nextCell = this.board.findCell(nextCoordinates.join('-'));\n\n        if (this.shouldCapture(cell, nextCell)) {\n          newMoves.push(new Command(cell, direction));\n          cell = nextCell;\n        } else if (continueCount > 0) {\n          let otherDirections;\n          switch (direction) {\n            case 'up':\n            case 'down':\n              otherDirections = ['left', 'right'];\n              break;\n            case 'left':\n            case 'right':\n              otherDirections = ['up', 'down'];\n              break;\n            default:\n              console.log(\"Bad direction input\");\n          }\n          let otherDirection = shuffle(otherDirections).pop();\n          return newMoves.concat(this.search(cell, otherDirection, continueCount - 1));\n        } else {\n          return newMoves;\n        }\n      }\n    }\n\n    return newMoves;\n  }\n\n  shouldCapture(cell, nextCell) {\n    return (nextCell &&\n    !nextCell.mountain &&\n    !(nextCell.city && nextCell.color !== 'blue' && cell.count + 2 < nextCell.count));\n  }\n\n  attack() {\n    if (this.moves.length === 0) {\n      let moveTree = new MoveTree(this.largestArmy(), this.board);\n      let attackVector = moveTree.findPath(this.contactCell);\n\n      this.moves = attackVector;\n    }\n  }\n\n  kill() {\n    if (this.moves.length === 0) {\n      let moveTree = new MoveTree(this.largestArmy(true), this.board);\n      this.moves = moveTree.findPath(this.playerKing);\n    }\n  }\n\n\n  defend() {\n    if (this.moves.length === 0 && this.board.blueTerritory().length > 1) {\n      let moveTree = new MoveTree(this.largestArmy(false), this.board);\n      this.moves = moveTree.findPath(this.king);\n    }\n  }\n\n\n\n  canSeePlayer() {\n    // TODO eventually return a random cell that works, not just the first one\n\n    let redCell;\n    this.board.blueTerritory().forEach(cell => {\n      this.board.visibleCells(cell).forEach(otherCell => {\n        if (otherCell.color === 'red') {\n          redCell = otherCell;\n          if (otherCell.king) {\n            this.playerKing = otherCell;\n          }\n        }\n      });\n    });\n\n    this.contactCell = redCell;\n    return redCell;\n  }\n\n\n  seenByPlayer() {\n    this.board.visibleCells(this.king).forEach(otherCell => {\n      if (otherCell.color === 'red') {\n        this.seen = true;\n      }\n    });\n  }\n\n  largestArmy(includeKing = true) {\n    let currentLargest;\n    this.board.blueTerritory().forEach(cell => {\n      if (!currentLargest || cell.count > currentLargest.count) {\n        if (!cell.king || includeKing) {\n          currentLargest = cell;\n        }\n      }\n    });\n\n    return currentLargest;\n  }\n}\n\nexport default Adversary;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/adversary.js","import Command from './command';\nimport { getNextCoordinates } from './util';\n\nclass Cursor {\n  constructor(board) {\n    this.board = board;\n    this.moves = [];\n  }\n\n  move(direction) {\n    let currentHTMLCell = document.getElementsByClassName('selected')[0];\n    let nextCoordinates = getNextCoordinates(currentHTMLCell.id, direction);\n\n    if(nextCoordinates.every(coord => coord >= 0 && coord <= 9)) {\n      let currentCell = this.board.findCell(currentHTMLCell.id);\n      let nextHTMLCell = document.getElementById(nextCoordinates.join('-'));\n\n      currentHTMLCell.classList.remove('selected');\n      nextHTMLCell.classList.add('selected');\n\n      if (currentCell) {\n        // TODO Add direction class to the corresponding htmlCell (to render queue)\n        this.moves.push(new Command(currentCell, direction));\n      }\n    }\n  }\n\n  clearMoves() {\n    this.moves = [];\n  }\n\n  nextMove() {\n    if (this.moves.length === 0) {\n      return false;\n    }\n\n    while (this.moves[0].cell.color !== 'red' || this.moves[0].cell.count < 2) {\n      // TODO remove the direction class from the corresponding htmlCell\n      this.moves.shift();\n      if (this.moves.length === 0) {\n        return false;\n      }\n    }\n\n    return this.moves.shift();\n  }\n\n  // getNextCoordinates(id, direction) {\n  //   let nextId;\n  //   let coordinates = id.split('-').map(char => parseInt(char));\n  //\n  //   switch (direction) {\n  //     case 'up':\n  //       return [coordinates[0]-1, coordinates[1]];\n  //     case 'down':\n  //       return [coordinates[0]+1, coordinates[1]];\n  //     case 'left':\n  //       return [coordinates[0], coordinates[1]-1];\n  //     case 'right':\n  //       return [coordinates[0], coordinates[1]+1];\n  //     default:\n  //       console.log('Invalid Move');\n  //   }\n  // }\n}\n\nexport default Cursor;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/cursor.js","import Game from './game';\nimport Board from './board';\nimport { populateHTML, updateHTML, unselectOtherCells } from './util';\n\nlet board = new Board();\nlet game = new Game(board);\nlet cursor = game.cursor;\nlet htmlGrid = document.getElementById(\"grid\");\n\npopulateHTML(board, htmlGrid);\n\nfunction selectCell(e) {\n    if (e.target !== e.currentTarget) {\n        let cell = e.target;\n        if (!cell.classList.contains('selected')) {\n          // TODO: instead, store the previously selected cell and just remove it from that\n          unselectOtherCells(board);\n          cell.classList.add('selected');\n        }\n    }\n    e.stopPropagation();\n}\n\nhtmlGrid.addEventListener(\"click\", selectCell);\n\nkey('q', () => cursor.clearMoves());\nkey('w', () => cursor.move('up'));\nkey('up', () => cursor.move('up'));\nkey('s', () => cursor.move('down'));\nkey('down', () => cursor.move('down'));\nkey('a', () => cursor.move('left'));\nkey('left', () => cursor.move('left'));\nkey('d', () => cursor.move('right'));\nkey('right', () => cursor.move('right'));\n\nsetInterval( (() => updateHTML(board)), 500);\n\nlet infoBox = document.getElementById('about-game');\nlet winBox = document.getElementById('win-modal');\n\nfunction openInfo(){\n  game.removeIntervals();\n  infoBox.classList.remove(\"is-hidden\");\n}\n\nfunction closeInfo(){\n  if (!board.winner()) {\n    game.startIntervals();\n   }\n  infoBox.classList.add(\"is-hidden\");\n}\n\nfunction closeWin(){\n  winBox.classList.add(\"is-hidden\");\n}\n\nfunction playAgain() {\n  board.reset();\n  game.removeIntervals();\n  game = new Game(board);\n  cursor = game.cursor;\n\n  while (htmlGrid.firstChild) {\n    htmlGrid.removeChild(htmlGrid.firstChild);\n  }\n\n  populateHTML(board, htmlGrid);\n  winBox.classList.add(\"is-hidden\");\n  infoBox.classList.add(\"is-hidden\");\n}\n\n\nlet aboutButton = document.getElementById(\"info\");\naboutButton.addEventListener(\"click\", openInfo);\nlet closeAboutButton = document.getElementById('quit-button-info');\ncloseAboutButton.addEventListener(\"click\", closeInfo);\nlet closeWinButton = document.getElementById('quit-button');\ncloseWinButton.addEventListener(\"click\", closeWin);\nlet newGameButton = document.getElementById(\"play-button-info\");\nnewGameButton.addEventListener(\"click\", playAgain);\nlet playAgainButton = document.getElementById(\"play-button\");\nplayAgainButton.addEventListener(\"click\", playAgain);\n\n\n\n// WEBPACK FOOTER //\n// ./lib/generals.js","import TreeNode from './tree_node';\nimport Command from './command';\n\nclass MoveTree {\n  constructor(startingCell, board) {\n    this.startingCell = startingCell;\n    this.visitedCells = [startingCell];\n    this.board = board;\n    this.rootNode = new TreeNode(startingCell);\n\n    this.buildMoveTree();\n  }\n\n  findPath(targetCell) {\n    if (this.startingCell === targetCell) {\n      return [];\n    }\n\n    let endNode = this.rootNode.bfSearch(targetCell);\n    let path = this.pathFromEnd(endNode);\n    let commands = [];\n    let directionToChild;\n\n    path.forEach(node => {\n      if (directionToChild) {\n        commands.push(new Command(node.cell, directionToChild));\n      }\n      directionToChild = node.directionFromParent;\n    });\n    return commands.reverse();\n  }\n\n  buildMoveTree() {\n    let nodes = [this.rootNode];\n    while (nodes.length !== 0) {\n      let currentNode = nodes.shift();\n      let newCells = this.newCells(currentNode);\n      newCells.forEach(nextCell => {\n        let nextNode = new TreeNode(nextCell);\n        currentNode.addChild(nextNode);\n        nodes.push(nextNode);\n      });\n    }\n  }\n\n  newCells(node) {\n    let newCells = this.board.moveableCells(node.cell)\n      .filter(candidateCell => !this.visitedCells.includes(candidateCell));\n\n    this.visitedCells =  this.visitedCells.concat(newCells);\n    return newCells;\n  }\n\n  pathFromEnd(endNode) {\n    let nodes = [];\n    let currentNode = endNode;\n\n    while (currentNode) {\n      nodes.push(currentNode);\n      currentNode = currentNode.parent;\n    }\n\n    return nodes;\n  }\n\n}\n\nexport default MoveTree;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/move_tree.js","import Cell from './cell';\n\nclass City extends Cell {\n  constructor() {\n    super();\n    this.city = true;\n    this.count = 40;\n  }\n}\n\nclass King extends City {\n  constructor(color) {\n    super();\n    this.king = true;\n    this.color = color;\n    this.count = 1;\n  }\n}\n\nlet Mountain = new Cell();\nMountain.mountain = true;\nObject.freeze(Mountain);\n\n\n\nexport { City, Mountain, King };\n\n\n\n// WEBPACK FOOTER //\n// ./lib/special_cells.js","class TreeNode {\n  constructor(cell) {\n    this.cell = cell;\n    this.children = [];\n    this.parent = null;\n    this.directionFromParent = null;\n  }\n\n\n  setParent(parent) {\n    ;\n    if (parent !== this.parent) {\n \t\t\tif (this.parent) {\n\t\t\t\tthis.parent.removeFromChildren(this);\n\t\t\t}\n\n\t\t\tthis.parent = parent;\n\t\t\tif (this.parent) {\n\t\t\t\tthis.parent.addToChildren(this);\n\t\t\t}\n\n      this.directionFromParent = this.orientFromParent();\n      ;\n\t\t\treturn this;\n    }\n  }\n\n\taddChild(child) {\n\t\tchild.setParent(this);\n\t}\n\n\tremoveChild(child) {\n\t\tif (child && this.children.includes(child)) {\n\t\t\tchild.setParent(null);\n\t\t}\n\t}\n\n\taddToChildren(newChild) {\n\t\tthis.children.push(newChild);\n\t}\n\n\tremoveFromChildren(childToRemove) {\n\t\tthis.children = this.children.filter(childNode => childNode !== childToRemove);\n\t}\n\n  bfSearch(targetCell, callback) {\n\n    if (!callback && targetCell) {\n      callback = (cell) => cell.id === targetCell.id;\n    }\n\n    let nodes = [this];\n    ;\n    while (nodes.length !== 0) {\n      let currentNode = nodes.shift();\n      ;\n      if (callback(currentNode.cell)) {\n\n        return currentNode;\n      }\n\n      nodes = nodes.concat(currentNode.children);\n    }\n  }\n\n  orientFromParent() {\n    // returns the direction you would have to move, starting from parent, to reach own cell\n    let ownCoords = this.cell.id.split('-').map(char => parseInt(char));\n    let parentCoords = this.parent.cell.id.split('-').map(char => parseInt(char));\n\n    if (parentCoords[0] > ownCoords[0]) {\n      return \"up\";\n    } else if (parentCoords[0] < ownCoords[0]) {\n      return \"down\";\n    } else if (parentCoords[1] > ownCoords[1]) {\n      return \"left\";\n    } else {\n      return \"right\";\n    }\n  }\n}\n\nexport default TreeNode;\n\n\n\n// WEBPACK FOOTER //\n// ./lib/tree_node.js"],"sourceRoot":""}